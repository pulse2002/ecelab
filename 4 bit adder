
module full_adder(A,B,CIN,Sum,COUT); 
input A,B,CIN; 
output Sum,COUT; 
assign Sum=A^B^CIN; 
assign COUT=(A&B)|(CIN&(A^B)); 
endmodule 
module four_bit_adder(A,B,C0,Sum,C4); 
input [3:0]A; 
input [3:0]B; 
input C0; 
input [3:0] Sum,C4; 
wire C1,C2,C3; 
full_adder fa0 (A[0],B[0],C0,Sum[0],C1); 
full_adder fa1 (A[1],B[1],C1,Sum[1],C2); 
full_adder fa2 (A[2],B[2],C2,Sum[2],C3); 
full_adder fa3 (A[3],B[3],C3,Sum[3],C4); 
endmodule 
testbench: 
module test_4_bit; 
reg [3:0] A,B; 
reg C0; 
wire [3:0] Sum; 
wire C4; 
four_bit_adder uut(A,B,C0,Sum,C4); 
initial begin 
A=4'b0011;B=4'b0011;C0=1'b0;#10; 
A=4'b1011;B=4'b0111;C0=1'b1;#10; 
A=4'b1111;B=4'b1111;C0=1'b1;#10; 
end 
initial 
#50 $finish; 
endmodule
